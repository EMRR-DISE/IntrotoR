---
title: "Data Manipulation"
author: "Perry S"
format:
  html:
    code-link: true
code-copy: true
execute: 
  message: false
  warning: false
---

# Working with Data in R

As data scientists, our goal to use our collected data to produce statistics and graphics that inform various management and scientific questions. In order to do this, we must first learn how to properly format our data in R. Practically, this means learning basic processes for formatting data frames.

## Load Packages

One of the most important "packages" for this task is `tidyverse`, which we learned about yesterday. We'll import it here:

```{r}
library(tidyverse)
```

# Read in Data

Next, we must import our data. The common function for this is `read_csv` from `readr` (which is nested in `tidyverse`). For our demonstrations, we will use the **WQ_P8D7.csv** file housed in the **data** folder.

When importing data, we must specify the *filepath* where it's housed. There are multiple ways to do this. We could hard-code in the path, which is called the *absolute path*:

```{r}
df_wq <- read_csv('C:/R/IntrotoR/data/WQ_P8D7.csv')
```

However, this code is very specific and will break when used on other computers. If we instead house data in a **Project**, we can make use of *relative filepaths*. These are ideal because anyone who uses the Project can run the code:

```{r}
df_wq <- read_csv('data/WQ_P8D7.csv')
```

[If you received an error here]{.underline}, this is because your Rmd files are not being evaluated at the Project level. One way to fix this is to change your options in `Tools` \> `Global Options` \> `R Markdown` \> `evaluate chunks in directory` to `Project`.

You can also use the `here` package instead:

```{r}
library(here)

df_wq <- read_csv(here('data/WQ_P8D7.csv'))
```

We now have a dataframe *object* called `df_wq`. We can use `head` to see what this dataframe looks like:

```{r}
head(df_wq)
```

And `glimpse` to see information about the columns:

```{r}
glimpse(df_wq)
```

# Subsetting

Lets talk a bit about the structure of the data frame. Dataframes are 2-dimensional objects (row x column). Every entry in a dataframe has a unique **index** that's defined by which row x column it's in. Since we rarely want to work on the entire dataframe at once, we can use these indices to **subset** our data.

For example, if I want to look at the value in the 1st row of the 2nd column:

```{r}
df_wq[1,2]
```

or, perhaps, the 2nd row of the 1st column:

```{r}
df_wq[2,1]
```

We can also access an entire row or column at once:

```{r}
df_wq[1,] # entire row
```

```{r}
df_wq[,1] # entire column
```

You can also subset multiple columns/rows at once by using a `:`

```{r}
df_wq[,2:4] # all rows, 2-4th columns
```

## Subset by Column Name

Subsetting is very powerful, but one issue is -- by access values by their numerical index -- we can get confused about what we're accessing. For example, if I wanted to work with `DissAmmonia` data, I would have to first know that it's the 4th column in my dataframe. That can get unwieldy with complex datasets.

Instead, we can use the **column header** to call a particular column:

```{r}
df_wq['DissAmmonia']
```

```{r}
str(df_wq['DissAmmonia'])
```

This returns a tibble that only contains the relevant column.

We can also call the column as a vector (this is the more common syntax):

```{r}
df_wq$DissAmmonia
```

```{r}
str(df_wq$DissAmmonia)
```

To select multiple columns by name, we use our `:` technique within the `select` function from the `dplyr` package (in tidyverse):

```{r}
df_wq %>% select(Station:Pheophytin)
```

If this is the only data I want to work with, I can store this as a unique object:

```{r}
df_chlpheo <- df_wq %>% select(Station:Pheophytin)
```

```{r}
glimpse(df_chlpheo)
```

### Aside: Tidyverse Pipes

You'll notice I used some new syntax there, namely, the `%>%`. This is called the *pipe operator*, Operators are functions that allows one to perform operations on other functions/variables. The pipe operator specifically allows you to chain together tidyverse commands.

Therefore, instead of writing the above code like this:

```{r}
select(df_wq, Station:Pheophytin)
```

For clarity, I can *pipe* the dataframe into the select function:

```{r}
df_wq %>% select(Station:Pheophytin)
```

## Subset By Row Values

Another common goal is to subset by particular row values -- say, only a given station, date range, or analyte value range. Tidyverse also has functions for this! Specifically, we use `filter` from the `dplyr` package:

```{r}
df_p8 <- df_wq %>% filter(Station == 'P8')
```

```{r}
unique(df_p8$Station)
```

## Aside: Logical Operators

### *equality* (`==`) and *negate equality* (`!=`)

Note we used another new symbol: `==`. This is the equality operator, a type of **logical operator**. Logical operators allow us to dictate what our code does via logical statements.

**Equality**, as we saw above, tells the code to find all values from the right-hand side that are equal to the left-hand side.

**Negate** does the opposite; it gives us the values that do not match. Here, we apply it to the equality operator, but note that `!` is the **general negate operator**; it can be applied to *any logical statement*.

```{r}
df_notp8 <- df_wq %>% filter(Station != 'P8')
```

```{r}
unique(df_notp8$Station)
```

### *and* (`&`) and *or* (`|`)

Sometimes, we want to filter by multiple commands at once. We can use this using the logical operators *and* (`&`) or *or* ('\|\`):

```{r}
df_wq %>% filter(Station == 'P8' & Date == '2020-01-16')
```

```{r}
df_wq %>% filter(Date == '2020-01-16' | Date == '2020-01-22')
```

### *less than* `<` and *greater than* `>`

Sometimes, we want all values above or below:

```{r}
df_wq %>% filter(Date >= '2020-02-01')
```

```{r}
df_wq %>% filter(Date <= '2020-06-30')
```

```{r}
df_wq %>% filter(!(Date >= '2020-06-30')) # same thing but using negate
```

What if we want data in between two dates? We can use the and (`&`) operator!

```{r}
df_wq %>% filter(Date >= '2020-02-01' & Date <= '2020-06-30')
```

### *in* (`%in%`)

What if we wanted to subset by five specific dates? We could string together multiple or (`|`) commands, but that can become unwieldy to write.

What if I instead had a vector of those five specific dates? Then I could subset by all the data in my dataset that matches one of the values in that vector.

This is what the `%in%` function does:

```{r}
df_wq %>% filter(Date %in% c('2020-02-14','2020-03-06','2020-06-11','2021-03-05','2021-04-05'))
```

### Aside: the lubridate package

What if I want to subset all values in a given year? If I had a vector of all the years in my dataset, then I could simply use `%in%`! But how would I get that vector?

The `lubridate` package allows you to manipulate dates. Since dates are complicated in R, we won't go into too much detail. However, a few useful functions are `day`, `month`, and `year`, which returns the days, months, and years (as vectors) from a vector of dates:

*Original:*

```{r}
df_wq$Date
```

*Days:*

```{r}
day(df_wq$Date)
```

*Months:*

```{r}
month(df_wq$Date)
```

*Years:*

```{r}
year(df_wq$Date)
```

One use for these functions is subsetting! Say we want all entries from the year 2021:

```{r}
df_wq %>% filter(year(Date) %in% '2021')
```

```{r}
# same thing but using negate
df_wq %>% filter(
  !(year(Date) %in% c('2020','2022'))
  )
```

### Exercise

In one filter function, how would I select data that's either before 2020-02-28 *or* after 2022-11-01?

```{r}
#| code-fold: true
#| eval: false

df_wq %>% filter(Date <= '2020-02-28' | Date >= '2022-11-01')
```

## Subset by Column and Row

Using our knowledge of pipes, it's easy to subset by column and row at the same time!

```{r}
df_wq %>% filter(Date == '2020-01-16' | Date == '2020-01-22') %>% select(Station:Pheophytin)
```

### Aside: Formatting Code

Notice that above all the code is on the same line. This can be difficult to read. You can get around this by formatting your code. Personally, I like having different functions on different lines:

```{r}
df_wq %>%
  filter(Date == '2020-01-16' | Date == '2020-01-22') %>%
  select(Station:Pheophytin)
```

You can also use `ctrl+shift+A` to auto-format code! Note that it looks different from above; this is fine. As long as you deem the code readable (and it works), you're set.

```{r}
# original
df_wq %>% filter(Date == '2020-01-16' | Date == '2020-01-22') %>% select(Station:Pheophytin)

# ctrl+shift+A
df_wq %>% filter(Date == '2020-01-16' |
                   Date == '2020-01-22') %>% select(Station:Pheophytin)
```

## Subset NA

There's one more type of subset that we'll cover today. This is selecting data that is `NA`.

`NA` is a logical constant of length 1 which contains a missing value indicator:

```{r}
typeof(NA) # NA

typeof('NA') # not the same
```

Sometimes, we want to select only NA data, or omit it entirely. Looking at the Chla column, we see that there are NAs:

```{r}
unique(df_wq$DON)
```

A quicker to check this is the `is.na` function:

```{r}
is.na(df_wq$DON)
```

This returns a logical vector. If I want to subset by this, I can use the `filter` function:

```{r}
df_wq %>%
  filter(is.na(df_wq$DON)) %>%
  select(Station, Date, DON)
```

**Question:** What operator would I use if I want all data *except* NAs (hint: I want to *negate* NA)

**Challenge Exercise**: How would I write this statement? (Hint: examples are above)

```{r}
#| code-fold: true
#| eval: false

df_wq %>%
  filter(!is.na(df_wq$DON)) %>% # use the ! operator before the function to negate it
  select(Station, Date, DON)
```

# Mutate Function

## New Columns

Sometimes, we want to modify our already existing columns, or even add new ones. This is where the `mutate` function from the `dplyr` package comes in.

With mutate, we can add in new columns:

```{r}
head(df_notp8)
```

```{r}
df_wq %>%
  mutate(Lab = 'BSA')
```

We can even add columns that are combinations of other ones:

```{r}
df_wq %>%
  mutate(chlpheo = Chla+Pheophytin)
```

```{r}
df_wq %>%
  mutate(statdate = paste(Station,Date,sep = '_'))
```

### Aside: Relocate Columns

Sometimes, we want to re-arrange our column order. For example, with our new `Lab` column, we might want that in the beginning with the other metadata. Here, we use the `relocate` function:

```{r}
df_wq %>%
  mutate(Lab = 'BSA') %>%
  relocate(Lab, .after = Date)
```

## Existing Columns

We can also use mutate *to modify existing columns*

```{r}
df_wq %>%
  mutate(Chla = Chla+20)
```

We can even change types! This is useful if, say, you have character column that should be numeric.

```{r}
df_wq %>%
  mutate(Chla = as.numeric(Chla),
         Pheophytin = as.numeric(Pheophytin))
```

### Aside: Case When

What if we only want to modify certain data in a column? Say, we want to add 20 to all Chla values *but only for P8*.

This can be done using the `case_when` function instead a mutate function:

```{r}
df_wq %>%
  mutate(
    Chla =
      case_when(Station == 'P8' ~ Chla + 20, # if station is P8, add 20
              TRUE ~ Chla) # else, keeep as previous value
  ) %>%
  select(c(Station:Date), Chla)
```

# Rename

Sometimes, we want to rename our columns (eg. if working with multiple dataframes, we want the columns to be standardized). We can do this using the `rename` function from the `dplyr` package:

```{r}
df_wq %>%
  rename(StationCode = Station)
```

# Final Exercise

Using pipes, modify the `df_wq` dataframe as so:

-   it's assigned to a new object named `df_new`

-   filter Date to 2021 data only (hint: after '2020-12-31', before '2022-12-31')

-   select only the `Station`, `Date`, `Chla`, and `Pheophytin` columns

-   mutate `Station` in-place so it's a factor column

**Challenge**:

-   mutate `Chla` so it's +20 specifically for the case when the *month* is April (04) *and* the station is P8

-   assign this new dataframe to the object `df_new`

    -   can you access the "original" `df_new` now? what happens if you re-run the code?

```{r}
#| code-fold: true
#| eval: false

df_new <- df_wq %>%
  filter(Date > '2020-12-31' & Date < '2022-12-31') %>%
  select(c(Station, Date, Chla, Pheophytin)) %>%
  mutate(Station = factor(Station))

str(df_new)
```

```{r}
#| code-fold: true
#| eval: false

df_new <- df_new %>%
  mutate(
    Chla = case_when(
      month(Date) == 04 & Station == 'P8' ~ Chla + 20,
      TRUE ~ Chla
    )
  )

df_new
```
