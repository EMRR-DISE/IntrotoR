---
title: "Day 1 - Packages and importing data"
editor: visual
format:
  html:
    code-link: true
code-copy: true
execute: 
  message: false
  warning: false
---

## Packages

The real benefit of R is that it is open-source, and tons and tons of people have developed 'expansion packs' for R. You can go a very long way with just the built-in R functions, but many people have developed slightly different ways of doing things, easier methods, and more advanced things.

Let's go over to the R website and talk packages - <https://www.r-project.org/>

We had everyone install the `tidyverse` packages before getting started. This is actually a set of packages that all work together to make code a little more intuitive. Let's go over to the "Packages" tab in RStudio and check them out.

-   dplyr - data manipulation

-   lubridate - dates and times

-   ggplot2 - graphics

-   tidyr - more data manipulation

-   forcats - working with categorical variables (factors)

-   readr - importing data from spreadsheets

-   stringr - working with character strings

-   tibble - nicer checking and formatting for tables and data frames

You'll notice that besides the tidyverse, there are a number of other packages in this tab that you didn't install - they came along with base R.

When you want to install or update packages, you can use the `install.packages` command, or the GUI in RStudio. This command reaches out to the CRAN website and downloads the code files, saving them to your "library". You only have to do this once. However, at the start of every R session you will need to load the package into your environment using the `library` command. This is usually done at the top of your script.

```{r}
#load required libraries
library(readr)
```

Let's check out the documentation

```{r}
#| eval: false
#check out documentation
?readr

```

Click on the index, then one of the vignettes - those are very useful!

![](images/clipboard-1741072157.png)

### Package conflicts

After you've loaded a package, you might get some warnings about conflicted packages. These are different functions with the same name in two different packages. Mostly it isn't a problem, but sometimes you'll have to specify which function you mean.

Specify which you want with `package::function`

```{r}
library(lubridate)
```

If you really want the base version instead of the one from a package, you can use the `exclude` argument.

```{r}
#remove the lubrdate library we just loaded
detach("package:lubridate")

#now reload with the exclusion
library(lubridate, exclude = "date")
```

### Exercise

Let's try using a function that is in a package. `glimpse` is an simple function that tells you about a data frame. R has a number of built-in data sets that you can play with, and one is `mtcars`. It's just a table of different makes and models of cars and their stats.

```{r}
#| eval: false

#The View function is built in. 
View(mtcars)
```

```{r}
#| error: true

#the "glimpse" function is in the dplyr package. It's part of the tidyverse set of packages. You should have installed it already
glimpse(mtcars)
```

Even though you installed it, you still need to load it into your workspace using the `library` command.

```{r}

library(dplyr)

glimpse(mtcars)
```

### Exercise

Now go to the documentation for dplyr and look through the "Introduction to dplyr" vignette. Take 10 mins and see if you try out some of the examples. We'll be using a lot of these dplyr functions later in the class.

```{r}
#| eval: FALSE

?dplyr

vignette("dplyr")	
```

## Importing and Exporting data

Next, we must import our data.

The common function for this is `read_csv` from `readr` (which is nested in `tidyverse`). For our demonstrations, we will use the **WQ_P8D7.csv** file housed in the **data** folder.

When importing data, we must specify the *filepath* where it's housed. There are multiple ways to do this. We could hard-code in the path, which is called the **absolute path**:

```{r}
#| error: true

df_wq <- read_csv('C:/R/IntrotoR/data/WQ_P8D7.csv')
```

However, this code is very specific and will break when used on other computers.

If we instead house data in a **Project**, we can make use of **relative filepaths**. These are ideal because anyone who uses the Project can run the code:

```{r}
df_wq <- read_csv('data/WQ_P8D7.csv')
```

**If you received an error here**, this is probably because you either didn't save the file in the right folder, or you are not working in a project.

::: callout-note
### Data File Extensions and Delimiters

Here, we used the `read_csv` function, which takes .csv files by default. But what is a csv?

"csv" stands for "comma separated values", where the comma is called a **delimiter**; it tells the code where to separate the data cells. If you want to use a different delimiter, you can use the `read_delim` function (also from the `readr` package):

```{r}
read_delim('data/delim_ex.txt', delim = '|') # data separated by |
```

for tab delimited data (a fairly frequent format), there's `read_tsv`:

```{r}
read_tsv('data/tab_ex.tsv')
```

Excel files (.xlsx) are unique because they're not solely defined by their delimiters, which allows for more complicated file formatting. To import these, we use `read_excel` from the `readxl` package:

```{r}
library(readxl)

read_excel('data/excel_ex.xlsx', sheet = 'Sheet1') # read the first sheet (by name)

read_excel('data/excel_ex.xlsx', sheet = 2) # read the second sheet (by number)
```
:::

------------------------------------------------------------------------

We now have a data frame *object* called `df_wq`. We can use `head` to see what the first few rows of the data frame look like:

```{r}
head(df_wq)
```

And `glimpse` to see information about the columns:

```{r}
glimpse(df_wq)
```

## 
