---
title: "Reshaping Data"
author: "Dave Bosworth"
format:
  html:
    code-link: true
code-copy: true
execute: 
  message: false
  warning: false
---

```{r}
#| include: false

library(tidyverse)
library(here)

df_wq <- read_csv(here("data/WQ_P8D7.csv"))
```

## Introduction

Another common task that many of us need to do is change the structure of your data set to work with it more efficiently. Sometimes you'll need to convert the data structure in order to apply plotting or analysis functions on it. The R programming language makes this task fairly simple and quick. We'll start this lesson covering some basics of data structure, and then move into the powerful R functions from the [`tidyr`](https://tidyr.tidyverse.org/) package that help with reshaping data.

## Basics of Data Structure

Maybe you've heard of the terms "wide" and "long" to describe the structure of your data. These terms describe how your data is structured in terms of rows and columns.

"Wide" data is organized where each variable that changes over time is in its own column and each row is a unique observation. It is probably the format you are most familiar with as it is usually easier for us to visually interpret. This is also sometimes described as ["tidy" data](https://r4ds.hadley.nz/data-tidy.html) as it's the preferred format for data analysis, storage, and publishing. However, wide tables can be difficult to work with if they have too many columns or if the data is not well-organized. Here is a visual representation of a table in "wide" format:

```{r}
#| echo: FALSE
#| out-width: 80%
#| fig-align: left
#| fig-cap: Image Credit <https://www.statology.org/long-vs-wide-data/>

knitr::include_graphics(here("code/images/wideLong2-768x317.png"), error = FALSE)
```

<br>

Here is the same table but converted to a "long" format:

```{r}
#| echo: FALSE
#| out-width: 70%
#| fig-align: left
#| fig-cap: Image Credit <https://www.statology.org/long-vs-wide-data/>

knitr::include_graphics(here("code/images/wideLong3-1-768x845.png"), error = FALSE)
```

Now the values in the "Team" column repeat because each variable (Points, Assists, and Rebounds) are identified as a category in one column (Variable). Sometimes we need to reshape data into this structure if we need to visualize multiple variables in a plot or to conduct other analyses, so it is important to know how to switch between "wide" and "long" data structures. We'll get into that in the next section.

## Converting between Data Structures

For this lesson, we will continue to work with the EMP water quality data set. As a reminder, here is the structure of that data frame:

```{r}
glimpse(df_wq)
```

We'll start by creating a new data frame object `df_wq_nutr` with three common nutrients (dissolved ammonia, nitrate + nitrite, and ortho-phosphate) from the EMP water quality data set. This will allow for us to use a more condensed and simpler data frame for this example.

```{r}
df_wq_nutr <- df_wq %>% 
  select(Station, Date, DissAmmonia, DissNitrateNitrite, DissOrthophos)

df_wq_nutr
```

Pop quiz: What structure is this data frame in - "wide" or "long"?

I would describe this as "wide" format, because each nutrient parameter is in its own column and each observation (water quality sample) is in its own row. The stations (P8 and D7) repeat, but that is because EMP visited these stations each month to collect samples. Each Station and Date combination is considered a unique observation or sample.

### "Wide" to "Long"

If we needed to reshape the data so the nutrient parameters repeat in a "Parameter" column, we could use the `pivot_longer` function to accomplish that:

```{r}
df_wq_nutr_long <- df_wq_nutr %>% 
  pivot_longer(
    cols = c(DissAmmonia, DissNitrateNitrite, DissOrthophos),
    names_to = "Parameter",
    values_to = "Value"
  )

print(df_wq_nutr_long, n = 30)
```

Now you can see that the nutrient parameters repeat in a "Parameter" column and the data values are now in the "Value" column. Let's take a closer look on how to use the `pivot_longer` function. The three necessary arguments in this function (after the first argument which is the data frame itself) are:

* `cols` defines which columns are to be moved into one column.
* `names_to` names the variable to move the columns in `cols` to.
* `values_to` names the variable to move the cell values of the columns in `cols` to.

::: {.callout-note}
Note that the variables in both `names_to` and `values_to` require "quotes" since we are creating new columns.
:::

### "Long" to "Wide"

Now, imagine that we wanted to reshape the `df_wq_nutr_long` data frame that we just created back into its original "wide" structure. We could just use the original data frame `df_wq_nutr`, but let's assume that we don't have that. In this case we could use the `pivot_wider` function:

```{r}
df_wq_nutr_wide <- df_wq_nutr_long %>% 
  pivot_wider(names_from = Parameter, values_from = Value)

df_wq_nutr_wide
```

The resulting `df_wq_nutr_wide` data frame is back in the original "wide" structure that we started with. Again, let's review how to use the `pivot_wider` function. This function has two necessary arguments after the first one for the data frame:

* `names_from` defines the column from which the new column names will be named to.
* `values_from` defines the column from which the cell values will be derived from.

::: {.callout-note}
Note that the variables in both `names_from` and `values_from` are unquoted since we're defining existing columns.
:::

### Exercise

Now its your turn to try out the reshaping functions we just learned about.

1) Use `pivot_longer` to create a data frame from `df_wq` where the water quality measurements ("Secchi", "SpCndSurface", and "WTSurface") are reshaped into a column named "WQ_Measurement" and their values are in a column called "Result". Assign this data frame to a new object to be used later.\
**HINT:** Make sure to use `select` to subset the data frame to contain the columns you need. Use our nutrient example above.

2) Now, use `pivot_wider` to reshape the "long" data frame you created in #1 back to its original "wide" structure.

Click below for the answer when you are done!

```{r}
#| code-fold: true
#| eval: false

# Create new "long" data frame for just the water quality measurements
df_wq_meas_long <- df_wq %>% 
  select(Station, Date, Secchi, SpCndSurface, WTSurface) %>% 
  pivot_longer(
    cols = c(Secchi, SpCndSurface, WTSurface),
    names_to = "WQ_Measurement",
    values_to = "Result"
  )

# Take a look at df_wq_meas_long
df_wq_meas_long

# Reshape df_wq_meas_long back to it's original "Wide" structure
df_wq_meas_long %>% pivot_wider(names_from = WQ_Measurement, values_from = Result)
```

