---
title: "Import Data"
author: "Perry S"
format:
  html:
    code-link: true
code-copy: true
execute: 
  message: false
  warning: false
---

## Load Packages

Before we can work with our data, we need to load the relevant *packages*. One of the most important ones for this task is `tidyverse`, which we learned about yesterday. We'll import it here:

```{r}
library(tidyverse)
```

## Read in Data

Next, we must import our data.

The common function for this is `read_csv` from `readr` (which is nested in `tidyverse`). For our demonstrations, we will use the **WQ_P8D7.csv** file housed in the **data** folder.

When importing data, we must specify the *filepath* where it's housed. There are multiple ways to do this. We could hard-code in the path, which is called the **absolute path**:

```{r}
#| error: true

df_wq <- read_csv('C:/R/IntrotoR/data/WQ_P8D7.csv')
```

However, this code is very specific and will break when used on other computers.

If we instead house data in a **Project**, we can make use of **relative filepaths**. These are ideal because anyone who uses the Project can run the code:

```{r}
df_wq <- read_csv('data/WQ_P8D7.csv')
```

**If you received an error here**, this is because your Rmd files are not being evaluated at the Project level.

One way to fix this is to change your options in `Tools` \> `Global Options` \> `R Markdown` \> `evaluate chunks in directory` to `Project`.

You can also use the `here` package instead, which automatically evaluates at the Project level:

```{r}
library(here)

df_wq <- read_csv(here('data/WQ_P8D7.csv'))
```

::: callout-note
### Data File Extensions and Delimiters

Here, we used the `read_csv` function, which takes .csv files by default. But what is a csv?

"csv" stands for "comma separated values", where the comma is called a **delimiter**; it tells the code where to separate the data cells. If you want to use a different delimiter, you can use the `read_delim` function (also from the `readr` package):

```{r}
read_delim('data/delim_ex.txt', delim = '|') # data separated by |
```

for tab delimited data (a fairly frequent format), there's `read_tsv`:

```{r}
read_tsv('data/tab_ex.tsv')
```

Excel files (.xlsx) are unique because they're not solely defined by their delimiters, which allows for more complicated file formatting. To import these, we use `read_excel` from the `readxl` package:

```{r}
library(readxl)

read_excel('data/excel_ex.xlsx', sheet = 'Sheet1') # read the first sheet (by name)

read_excel('data/excel_ex.xlsx', sheet = 2) # read the second sheet (by number)
```
:::

------------------------------------------------------------------------

We now have a data frame *object* called `df_wq`. We can use `head` to see what the first few rows of the data frame look like:

```{r}
head(df_wq)
```

And `glimpse` to see information about the columns:

```{r}
glimpse(df_wq)
```
